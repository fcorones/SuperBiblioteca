@page "/reservar/{LibroId:int}"
@using BibliotecaDeClasesWinformYBlazor.Servicios
@using BibliotecaDeClasesWinformYBlazor.Models
@using Biblioteca_Blazor_v1.Client.Components
@inject LibroService LibroService
@inject AuthContext AuthContext
@inject NavigationManager Navigation
@inject PrestamoService PrestamoService

<h3>Reservar Libro</h3>

@if (Libro == null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p class="mt-3">Cargando detalles del libro...</p>
    </div>
}
else
{
    <div class="form-group">
        <label>Nombre del Libro</label>
        <input type="text" class="form-control" value="@Libro.Titulo" readonly />
    </div>

    <!-- Modificar las visualizaciones de fecha -->
    <div class="form-group">
        <label>Fecha de Retiro seleccionada: </label>
        <span>@(FechaRetiro?.ToShortDateString() ?? "No seleccionada")</span>
    </div>

    <div class="form-group">
        <label>Fecha de Devolución seleccionada: </label>
        <span>@(FechaDevolucion?.ToShortDateString() ?? "No seleccionada")</span>
    </div>


    <!-- Agregar este botón junto a los existentes -->
    <div class="mt-3 mb-2">
        <button class="btn btn-secondary" @onclick="ToggleSeleccion">
            Seleccionar @(SeleccionandoRetiro ? "Devolución" : "Retiro")
        </button>
        <button class="btn btn-warning ms-2" @onclick="LimpiarSeleccion">
            Limpiar Selección
        </button>
        <small class="text-muted">Actualmente eligiendo: @(SeleccionandoRetiro ? "Retiro" : "Devolución")</small>
    </div>

    <!-- Aquí usamos nuestro Calendar.razor -->
    <Calendar 
        CurrentDate="CurrentCalendarDate"
        OccupiedDates="FechasOcupadas"
        FechaRetiroSeleccionada="FechaRetiro"
        FechaDevolucionSeleccionada="FechaDevolucion"
        OnDateSelected="OnCalendarDateSelected" />

    <button class="btn btn-primary mt-3" @onclick="Reservar">Reservar</button>

    @if (!string.IsNullOrEmpty(MensajeError))
    {
        <div class="alert alert-danger mt-3">
            @MensajeError
        </div>
    }
}

@code {
    [Parameter]
    public int LibroId { get; set; }

    private Libro Libro { get; set; }

    // Fechas internas seleccionadas por el usuario
    private DateTime? FechaRetiro { get; set; }
    private DateTime? FechaDevolucion { get; set; }



    private bool SeleccionandoRetiro { get; set; } = true; // Toggle para saber qué fecha se está eligiendo
    private DateTime currentCalendarDate = DateTime.Today;
    // Si se desea empezar el calendario en la fecha actual
    private DateTime CurrentCalendarDate
    {
        get => currentCalendarDate;
        set
        {
            if (currentCalendarDate != value)
            {
                currentCalendarDate = value;
                StateHasChanged();
            }
        }
    }

    private string MensajeError { get; set; }
    private List<DateTime> FechasOcupadas { get; set; } = new List<DateTime>();

    private void LimpiarSeleccion()
    {
        FechaRetiro = null;
        FechaDevolucion = null;
        MensajeError = null;
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            // 1) Obtener detalles del libro
            Libro = await LibroService.GetLibroByIdAsync(LibroId);

            // 2) Obtener fechas ocupadas del libro
            await CargarFechasOcupadas();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en obtener detalles del libro: {ex.Message}");
        }
    }

    private async Task CargarFechasOcupadas()
    {
        var prestamos = await PrestamoService.GetPrestamosAsync();
        var prestamosDelLibro = prestamos
            .Where(p => p.LibroId == LibroId && !p.Eliminado)
            .ToList();

        FechasOcupadas.Clear();
        foreach (var prestamo in prestamosDelLibro)
        {
            for (var fecha = prestamo.FechaPrestamo; fecha <= prestamo.FechaDevolucion; fecha = fecha.AddDays(1))
            {
                FechasOcupadas.Add(fecha);
            }
        }

        Console.WriteLine($"Fechas ocupadas cargadas: {FechasOcupadas.Count}");
    }

    private void ToggleSeleccion()
    {
        // Cambia entre elegir retiro o devolución
        SeleccionandoRetiro = !SeleccionandoRetiro;
    }

    // Este método se invoca cada vez que el usuario hace clic en un día del calendario
    private void OnCalendarDateSelected(DateTime date)
    {
        if (FechasOcupadas.Contains(date)) return;

        // Actualizar el mes mostrado al seleccionar una fecha
        if (date.Month != CurrentCalendarDate.Month)
        {
            CurrentCalendarDate = new DateTime(date.Year, date.Month, 1);
        }

        if (SeleccionandoRetiro)
        {
            FechaRetiro = date;
        }
        else
        {
            FechaDevolucion = date;
        }
    }

    private async Task Reservar()
    {
        // Validaciones
        if (FechaRetiro < DateTime.Today)
        {
            MensajeError = "La fecha de retiro no puede ser anterior a hoy.";
            return;
        }

        if (FechaDevolucion < FechaRetiro)
        {
            MensajeError = "La fecha de devolución no puede ser anterior a la fecha de retiro.";
            return;
        }

        // Verificar que el UsuarioId sea válido
        if (AuthContext.UserId <= 0)
        {
            MensajeError = "El UsuarioId no es válido.";
            return;
        }

        // Verificar solapamiento con las fechas ocupadas
        bool haySolapamiento = FechasOcupadas.Any(f => f >= FechaRetiro && f <= FechaDevolucion);
        if (haySolapamiento)
        {
            MensajeError = "El libro no está disponible en alguna(s) de las fechas seleccionadas.";
            return;
        }

        // Crear el objeto de préstamo
        var prestamo = new Prestamo
            {
                Id = 0,
                FechaPrestamo = FechaRetiro.Value, // Usar .Value para obtener el DateTime
                FechaDevolucion = FechaDevolucion.Value, // Igual aquí
                UsuarioId = AuthContext.UserId,
                LibroId = LibroId,
                Activo = true,
                Eliminado = false
            };
        try
        {
            await PrestamoService.CrearPrestamoAsync(prestamo);
            Navigation.NavigateTo("/"); 
        }
        catch (Exception ex)
        {
            MensajeError = $"Error al reservar el libro: {ex.Message}";
        }
    }
}
