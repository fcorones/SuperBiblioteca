@page "/reservar/{LibroId:int}"
@using BibliotecaDeClasesWinformYBlazor.Servicios
@using BibliotecaDeClasesWinformYBlazor.Models
@inject LibroService LibroService
@inject AuthContext AuthContext
@inject NavigationManager Navigation
@inject PrestamoService PrestamoService

<h3>Reservar Libro</h3>

@if (Libro == null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p class="mt-3">Cargando detalles del libro...</p>
    </div>
}
else
{
    <div class="form-group">
        <label for="libroNombre">Nombre del Libro</label>
        <input type="text" class="form-control" id="libroNombre" value="@Libro.Titulo" readonly />
    </div>

    <div class="form-group">
        <label for="fechaRetiro">Fecha de Retiro</label>
        <input type="date" class="form-control" id="fechaRetiro" @bind="FechaRetiro" />
    </div>

    <div class="form-group">
        <label for="fechaDevolucion">Fecha de Devolución</label>
        <input type="date" class="form-control" id="fechaDevolucion" @bind="FechaDevolucion" />
    </div>

    <button class="btn btn-primary" @onclick="Reservar">Reservar</button>

    @if (!string.IsNullOrEmpty(MensajeError))
    {
        <div class="alert alert-danger mt-3">
            @MensajeError
        </div>
    }
}

@code {
    [Parameter]
    public int LibroId { get; set; }

    private Libro Libro { get; set; }
    private DateTime FechaRetiro { get; set; } = DateTime.Today;
    private DateTime FechaDevolucion { get; set; } = DateTime.Today.AddDays(7);
    private string MensajeError { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Libro = await LibroService.GetLibroByIdAsync(LibroId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en obtener detalles del libro: {ex.Message}");
        }
    }

    private async Task Reservar()
    {
        // Validar fechas
        if (FechaRetiro < DateTime.Today)
        {
            MensajeError = "La fecha de retiro no puede ser anterior a la fecha actual.";
            return;
        }

        if (FechaDevolucion < FechaRetiro)
        {
            MensajeError = "La fecha de devolución no puede ser anterior a la fecha de retiro.";
            return;
        }
        Console.WriteLine("==============USUARIO=============");
        Console.WriteLine(AuthContext.UserId);

        // Verificar que el UsuarioId sea válido
        if (AuthContext.UserId <= 0)
        {
            MensajeError = "El UsuarioId no es válido.";
            return;
        }

        // Obtener todos los préstamos del libro
        var prestamos = await PrestamoService.GetPrestamosAsync();
        var prestamosDelLibro = prestamos
            .Where(p => p.LibroId == LibroId && !p.Eliminado)
            .ToList();

        // Verificar si hay solapamiento de fechas
        var solapamiento = prestamosDelLibro.Any(p =>
            FechaRetiro <= p.FechaDevolucion && FechaDevolucion >= p.FechaPrestamo);

        if (solapamiento)
        {
            MensajeError = "El libro no está disponible en el rango de fechas seleccionado.";
            return;
        }

        // Crear el objeto de préstamo
        var prestamo = new Prestamo
        {
            Id = 0,
            FechaPrestamo = FechaRetiro,
            FechaDevolucion = FechaDevolucion,
            UsuarioId = AuthContext.UserId,
            LibroId = LibroId,
            Activo = true,
            Eliminado = false
        };

        // Intentar reservar el libro
        try
        {
            await PrestamoService.CrearPrestamoAsync(prestamo);
            Navigation.NavigateTo("/"); // Redirigir al inicio si no hay errores
        }
        catch (Exception ex)
        {
            MensajeError = $"Error al reservar el libro: {ex.Message}";
        }
    }
}