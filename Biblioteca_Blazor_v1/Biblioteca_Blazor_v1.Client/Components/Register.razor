@page "/register"
@layout MainLayout
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthContext AuthContext
@inject UsuarioService UsuarioService
@using BibliotecaDeClasesWinformYBlazor.Models
@using BibliotecaDeClasesWinformYBlazor
@using BibliotecaDeClasesWinformYBlazor.Servicios
@using System.ComponentModel.DataAnnotations

<style>
    /* Estilos generales */
    .container {
        font-family: 'Poppins', sans-serif;
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
    }

    .card {
        border: none;
        border-radius: 15px;
        overflow: hidden;
        width: 100%;
        max-width: 500px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        background: #ffffff;
        box-shadow: 0 10px 30px rgba(0,0,0,0.08);
    }

    .card-header {
        background: linear-gradient(135deg, #2d2d2d, #404040);
        padding: 2rem;
        border-bottom: none;
    }

    .card-title {
        font-weight: 600;
        letter-spacing: -0.5px;
        font-size: 1.8rem;
        margin: 0;
        text-align: center;
        color: #ffffff;
    }

    /* Formulario */
    .form-label {
        font-weight: 500;
        color: #4a4a4a;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
    }

    .form-control {
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        padding: 0.75rem 1rem;
        transition: all 0.3s ease;
        background: #f8f9fa;
    }

        .form-control:focus {
            border-color: #606060;
            box-shadow: 0 0 0 3px rgba(96, 96, 96, 0.1);
            background: #ffffff;
        }

    /* Botones */
    .btn-primary {
        background: linear-gradient(135deg, #4a4a4a, #2d2d2d);
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        color: white;
        transition: all 0.3s ease;
    }

        .btn-primary:hover {
            background: linear-gradient(135deg, #2d2d2d, #4a4a4a);
            transform: scale(1.02);
        }

    .btn-outline-secondary {
        border: 2px solid #4a4a4a;
        color: #4a4a4a;
        transition: all 0.3s ease;
    }

        .btn-outline-secondary:hover {
            background: #4a4a4a;
            color: white;
        }

    /* Iconos */
    .bi {
        color: #606060;
        font-size: 1.2rem;
        margin-right: 10px;
        transition: color 0.3s ease;
    }

    .form-control:focus ~ .bi {
        color: #404040;
    }

    /* Alertas y validación */
    .alert {
        border-radius: 8px;
        background: #f8f9fa;
        border: 1px solid #e0e0e0;
        color: #4a4a4a;
    }

    .validation-message {
        color: #dc3545;
        font-size: 0.9rem;
        margin-top: 0.25rem;
        font-weight: 500;
    }

    /* Efectos hover */
    .nav-link:hover {
        background: rgba(0,0,0,0.03);
    }

    /* Animaciones */
    @@keyframes cardEntrance {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .card {
        animation: cardEntrance 0.6s cubic-bezier(0.23, 1, 0.32, 1) forwards;
    }
</style>
<div class="container mt-5">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h3 class="card-title mb-0">Registrarse</h3>
        </div>
        <div class="card-body">
            <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="nombre" class="form-label">
                        <span class="bi bi-person-fill me-2"></span>Nombre Completo
                    </label>
                    <InputText id="nombre" class="form-control" @bind-Value="registerModel.Nombre" />
                    <ValidationMessage For="@(() => registerModel.Nombre)" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">
                        <span class="bi bi-lock-fill me-2"></span>Contraseña
                    </label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="Password" />
                    <ValidationMessage For="@(() => Password)" />
                </div>

                <div class="mb-3">
                    <label for="email" class="form-label">
                        <span class="bi bi-envelope-fill me-2"></span>Email
                    </label>
                    <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
                    <ValidationMessage For="@(() => registerModel.Email)" />
                </div>

                <div class="mb-3">
                    <label for="direccion" class="form-label">
                        <span class="bi bi-house-door-fill me-2"></span>Dirección
                    </label>
                    <InputText id="direccion" class="form-control" @bind-Value="registerModel.Direccion" />
                    <ValidationMessage For="@(() => registerModel.Direccion)" />
                </div>

                <div class="mb-3">
                    <label for="telefono" class="form-label">
                        <span class="bi bi-telephone-fill me-2"></span>Teléfono
                    </label>
                    <InputText id="telefono" class="form-control" @bind-Value="registerModel.Telefono" />
                    <ValidationMessage For="@(() => registerModel.Telefono)" />
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }

                <button type="submit" class="btn btn-primary w-100">
                    <span class="bi bi-person-plus-fill me-2"></span>Registrarse
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private Usuario registerModel = new Usuario();
    private string Password { get; set; } = string.Empty;
    private string errorMessage = string.Empty;

    private async Task HandleRegister()
    {
        try
        {
            // Asignar valores adicionales al modelo
            registerModel.RolNombre = "USUARIO";
            registerModel.Eliminado = false;
            registerModel.ContraseñaHasheada = Password;

            // Llamar al servicio para crear el usuario
            var response = await UsuarioService.CrearUsuarioAsync(registerModel);

            if (response.IsSuccessStatusCode)
            {
                // Mostrar mensaje emergente de registro exitoso
                await JSRuntime.InvokeVoidAsync("alert", "Registro exitoso");

                // Redirigir a la página principal
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                // Mostrar mensaje de error si el registro falla
                var errorResponse = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al registrar usuario: {errorResponse}";
            }
        }
        catch (Exception ex)
        {
            // Manejar errores inesperados
            errorMessage = $"Ocurrió un error inesperado: {ex.Message}";
        }
    }
}