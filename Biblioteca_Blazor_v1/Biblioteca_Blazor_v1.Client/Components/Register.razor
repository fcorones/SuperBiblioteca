@page "/register"
@layout MainLayout
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthContext AuthContext
@inject UsuarioService UsuarioService
@inject IGeorefService GeorefService
@using BibliotecaDeClasesWinformYBlazor.Models
@using BibliotecaDeClasesWinformYBlazor
@using BibliotecaDeClasesWinformYBlazor.Servicios
@using System.ComponentModel.DataAnnotations

<style>
    /* Estilos generales */
    .container {
        font-family: 'Poppins', sans-serif;
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .card {
        border: none;
        border-radius: 15px;
        overflow: hidden;
        width: 100%;
        max-width: 600px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        background: #ffffff;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.2);
        }

    .card-header {
        background: linear-gradient(135deg, #2d2d2d, #404040);
        padding: 2rem;
        border-bottom: none;
    }

    .card-title {
        font-weight: 600;
        letter-spacing: -0.5px;
        font-size: 1.8rem;
        margin: 0;
        text-align: center;
        color: #ffffff;
    }

    /* Formulario */
    .form-label {
        font-weight: 500;
        color: #4a4a4a;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
    }

    .form-control {
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        padding: 0.75rem 1rem;
        transition: all 0.3s ease;
        background: #f8f9fa;
    }

        .form-control:focus {
            border-color: #606060;
            box-shadow: 0 0 0 3px rgba(96, 96, 96, 0.1);
            background: #ffffff;
        }

    /* Botones */
    .btn-primary {
        background: linear-gradient(135deg, #4a4a4a, #2d2d2d);
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        color: white;
        transition: all 0.3s ease;
    }

        .btn-primary:hover {
            background: linear-gradient(135deg, #2d2d2d, #4a4a4a);
            transform: scale(1.02);
        }

    /* Iconos */
    .bi {
        color: #606060;
        font-size: 1.2rem;
        margin-right: 10px;
        transition: color 0.3s ease;
    }

    .form-control:focus ~ .bi {
        color: #404040;
    }

    /* Alertas y validación */
    .alert {
        border-radius: 8px;
        background: #f8f9fa;
        border: 1px solid #e0e0e0;
        color: #4a4a4a;
    }

    .validation-message {
        color: #dc3545;
        font-size: 0.9rem;
        margin-top: 0.25rem;
        font-weight: 500;
    }

    /* Efectos hover */
    .nav-link:hover {
        background: rgba(0, 0, 0, 0.03);
    }

    .direccion-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
        margin-bottom: 1rem;
    }

    /* Animaciones */
    @@keyframes cardEntrance {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .card {
        animation: cardEntrance 0.6s cubic-bezier(0.23, 1, 0.32, 1) forwards;
    }
</style>

<div class="container mt-5">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h3 class="card-title mb-0">Registrarse</h3>
        </div>
        <div class="card-body">
            <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />

                <!-- Nombre Completo -->
                <div class="mb-3">
                    <label for="nombre" class="form-label">
                        <span class="bi bi-person-fill me-2"></span>Nombre Completo
                    </label>
                    <InputText id="nombre" class="form-control" @bind-Value="registerModel.Nombre" maxlength="50" />
                    <ValidationMessage For="@(() => registerModel.Nombre)" />
                </div>

                <!-- Contraseña -->
                <div class="mb-3">
                    <label for="password" class="form-label">
                        <span class="bi bi-lock-fill me-2"></span>Contraseña
                    </label>
                    <InputText type="password" id="password" class="form-control"
                               @bind-Value="registerModel.Password" maxlength="20" />
                    <ValidationMessage For="@(() => registerModel.Password)" />
                </div>

                <!-- Email -->
                <div class="mb-3">
                    <label for="email" class="form-label">
                        <span class="bi bi-envelope-fill me-2"></span>Email
                    </label>
                    <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
                    <ValidationMessage For="@(() => registerModel.Email)" />
                </div>

                <!-- Dirección -->
                <div class="mb-3">
                    <label class="form-label">
                        <span class="bi bi-house-door-fill me-2"></span>Dirección
                    </label>
                    <div class="direccion-grid">
                        <!-- Calle -->
                        <div>
                            <InputText class="form-control" placeholder="Calle"
                                       @bind-Value="registerModel.Calle" maxlength="50" />
                            <ValidationMessage For="@(() => registerModel.Calle)" />
                        </div>

                        <!-- Altura -->
                        <div>
                            <InputText class="form-control" placeholder="Altura"
                                       @bind-Value="registerModel.Altura" maxlength="10" />
                            <ValidationMessage For="@(() => registerModel.Altura)" />
                        </div>

                        <!-- Provincia -->
                        <div>
                            <label class="form-label">Provincia</label>
                            <InputSelect @bind-Value="registerModel.Provincia" class="form-control" @oninput="async (e) => await ProvinciaSeleccionada(e)">
                                <option value="">Seleccione una provincia</option>
                                @foreach (var provincia in provincias)
                                {
                                    <option value="@provincia.Nombre">@provincia.Nombre</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => registerModel.Provincia)" />
                        </div>

                        <!-- Ciudad -->
                        <div>
                            <label class="form-label">Ciudad</label>
                            @if (cargandoCiudades)
                            {
                                <div class="form-control">
                                    <span class="spinner-border spinner-border-sm"></span> Cargando ciudades...
                                </div>
                            }
                            else
                            {
                                <InputSelect @bind-Value="registerModel.Ciudad" class="form-control"
                                             disabled="@(string.IsNullOrEmpty(registerModel.Provincia))">
                                    <option value="">Seleccione una ciudad</option>
                                    @foreach (var ciudad in ciudades)
                                    {
                                        <option value="@ciudad.Nombre">@ciudad.Nombre</option>
                                    }
                                </InputSelect>
                            }
                            <ValidationMessage For="@(() => registerModel.Ciudad)" />
                        </div>
                    </div>
                </div>

                <!-- Teléfono -->
                <div class="mb-3">
                    <label for="telefono" class="form-label">
                        <span class="bi bi-telephone-fill me-2"></span>Teléfono
                    </label>
                    <InputText id="telefono" class="form-control"
                               @bind-Value="registerModel.Telefono" maxlength="15" />
                    <ValidationMessage For="@(() => registerModel.Telefono)" />
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }

                <button type="submit" class="btn btn-primary w-100">
                    <span class="bi bi-person-plus-fill me-2"></span>Registrarse
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string errorMessage = string.Empty;
    private List<Provincia> provincias = new();
    private List<Ciudad> ciudades = new();
    private bool cargandoCiudades = false;

    protected override async Task OnInitializedAsync()
    {
        provincias = await GeorefService.ObtenerProvincias();
        provincias = provincias.OrderBy(p => p.Nombre).ToList();
        await base.OnInitializedAsync();
    }

    private async Task ProvinciaSeleccionada(ChangeEventArgs e)
    {
        var provinciaNombre = e.Value?.ToString();
        if (!string.IsNullOrEmpty(provinciaNombre))
        {
            cargandoCiudades = true;
            try
            {
                ciudades = await GeorefService.ObtenerCiudadesPorProvincia(provinciaNombre);
                if (ciudades == null || !ciudades.Any())
                {
                    Console.WriteLine("No se encontraron ciudades para la provincia seleccionada.");
                }
                ciudades = ciudades.OrderBy(c => c.Nombre).ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al cargar ciudades: {ex.Message}");
                ciudades = new List<Ciudad>();
            }
            finally
            {
                cargandoCiudades = false;
            }
            StateHasChanged();
        }
        else
        {
            ciudades = new List<Ciudad>();
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        [MinLength(4, ErrorMessage = "Mínimo 4 caracteres")]
        [RegularExpression(@"^[a-zA-ZáéíóúÁÉÍÓÚñÑ ]+$", ErrorMessage = "Solo letras y espacios")]
        public string Nombre { get; set; } = string.Empty;

        [Required(ErrorMessage = "El teléfono es obligatorio")]
        [RegularExpression(@"^\d+$", ErrorMessage = "Solo números permitidos")]
        public string Telefono { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es obligatoria")]
        [MinLength(7, ErrorMessage = "Mínimo 7 caracteres")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "El email es obligatorio")]
        [EmailAddress(ErrorMessage = "Formato de email inválido")]
        [MaxLength(50, ErrorMessage = "El email no puede superar los 50 caracteres")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "La calle es obligatoria")]
        [MinLength(2, ErrorMessage = "Mínimo 2 caracteres")]
        [RegularExpression(@"^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑ .-]+$", ErrorMessage = "Caracteres no válidos")]
        public string Calle { get; set; } = string.Empty;

        [Required(ErrorMessage = "La altura es obligatoria")]
        [MinLength(2, ErrorMessage = "Mínimo 2 caracteres")]
        [RegularExpression(@"^[0-9]+$", ErrorMessage = "Solo números permitidos")]
        public string Altura { get; set; } = string.Empty;

        [Required(ErrorMessage = "La provincia es obligatoria")]
        public string Provincia { get; set; } = string.Empty;

        [Required(ErrorMessage = "La ciudad es obligatoria")]
        public string Ciudad { get; set; } = string.Empty;
    }

    private async Task HandleRegister()
    {
        try
        {
            // Combinar la dirección
            var direccionCompleta = $"{registerModel.Calle} {registerModel.Altura}, {registerModel.Ciudad}, {registerModel.Provincia}";

            var usuario = new Usuario
                {
                    Nombre = registerModel.Nombre,
                    Telefono = registerModel.Telefono,
                    Email = registerModel.Email,
                    Direccion = direccionCompleta,
                    RolNombre = "USUARIO",
                    Eliminado = false,
                    ContraseñaHasheada = registerModel.Password
                };

            var response = await UsuarioService.CrearUsuarioAsync(usuario);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "¡Registro exitoso!");
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al registrar: {errorResponse}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }
}