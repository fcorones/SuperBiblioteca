@page "/login"
@layout MainLayout
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthContext AuthContext
@using BibliotecaDeClasesWinformYBlazor.Models
@using BibliotecaDeClasesWinformYBlazor
@using System.ComponentModel.DataAnnotations

<div class="container mt-5">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h3 class="card-title mb-0">Iniciar sesión</h3>
        </div>
        <div class="card-body">
            <EditForm Model="@loginRequest" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label for="email" class="form-label">
                        <span class="bi bi-envelope-fill me-2"></span>Email
                    </label>
                    <InputText id="email" class="form-control" @bind-Value="loginRequest.Email" />
                    <ValidationMessage For="@(() => loginRequest.Email)" />
                </div>

                <div class="mb-3">
                    <label for="contraseña" class="form-label">
                        <span class="bi bi-lock-fill me-2"></span>Contraseña
                    </label>
                    <InputText id="contraseña" type="password" class="form-control" @bind-Value="loginRequest.Contraseña" />
                    <ValidationMessage For="@(() => loginRequest.Contraseña)" />
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }

                <button type="submit" class="btn btn-primary w-100 mb-3" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Cargando...</span>
                    }
                    else
                    {
                        <span class="bi bi-box-arrow-in-right me-2">Ingresar</span>
                        
                    }
                </button>

                <div class="text-center">
                    <p class="mb-0">¿No tienes una cuenta?</p>
                    <a href="/register" class="btn btn-outline-secondary w-100">
                        <span class="bi bi-person-plus-fill me-2"></span>Registrarse
                    </a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new LoginRequest();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            // Validar el formato del email
            if (!loginRequest.Email.Contains("@"))
            {
                errorMessage = "El email no es válido.";
                isLoading = false;
                return;
            }

            var httpClient = HttpClientProvider.GetHttpClient();
            var response = await httpClient.PostAsJsonAsync("api/Usuarios/login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TokenResponse>();

                if (result != null && !string.IsNullOrEmpty(result.Token))
                {
                    Console.WriteLine($"[Login] Token recibido: {result.Token}");

                    await AuthContext.SaveTokenToLocalStorageAsync(result.Token);
                    Console.WriteLine($"[Login] Usuario autenticado como: {AuthContext.UserName}");

                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
                else
                {
                    errorMessage = "No se recibió un token válido.";
                }
            }
            else
            {
                // Capturar el mensaje de error del servidor
                var errorResponse = await response.Content.ReadAsStringAsync();
                errorMessage = "Credenciales inválidas. Por favor, verifica tu email y contraseña.";

                // Si el servidor devuelve un mensaje de error específico, úsalo
                if (!string.IsNullOrEmpty(errorResponse))
                {
                    errorMessage = errorResponse;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ocurrió un error inesperado: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginRequest
    {
        [Required(ErrorMessage = "El email es obligatorio.")]
        [EmailAddress(ErrorMessage = "El email no es válido.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        public string Contraseña { get; set; } = string.Empty;
    }

    public class TokenResponse
    {
        public string Token { get; set; } = string.Empty;
    }
}