@using System.Globalization

<div class="calendar">
    <style>
        .calendar {
            max-width: 700px;
            margin: 0 auto;
            width: 100%;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 2px;
            min-height: 300px; /* Altura mínima fija */
        }

        .calendar-day-header {
            height: 40px; /* Altura fija para headers */
        }

        .calendar-day {
            height: 50px; /* Altura fija para días */
            min-height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .calendar-day.occupied {
                background: #ffcccc;
                cursor: not-allowed;
            }

            .calendar-day.selected {
                background: #cce5ff;
                font-weight: bold;
            }

            .calendar-day:hover:not(.occupied) {
                background: #f0f0f0;
            }

            .calendar-day:empty {
                background: #f8f8f8;
            }
    </style>

    <div class="calendar-header">
        <button @onclick="PreviousMonth">‹</button>
        <span>@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(CurrentDate.Month) @CurrentDate.Year</span>
        <button @onclick="NextMonth">›</button>
    </div>

    <div class="calendar-grid">
        @foreach (var day in DaysOfWeek)
        {
            <div class="calendar-day-header">@day</div>
        }
        @foreach (var day in Days)
        {
            <div class="calendar-day @(day.IsOccupied ? "occupied" : "") @(day.IsSelected ? "selected" : "")"
                 @onclick="() => SelectDate(day.Date)">
                @if (day.Date != DateTime.MinValue)
                {
                    @day.Date.Day
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public DateTime CurrentDate { get; set; } = DateTime.Today;

    [Parameter]
    public EventCallback<DateTime> CurrentDateChanged { get; set; } // <- Añadir este

    [Parameter]
    public List<DateTime> OccupiedDates { get; set; } = new List<DateTime>();

    [Parameter]
    public DateTime? FechaRetiroSeleccionada { get; set; }

    [Parameter]
    public DateTime? FechaDevolucionSeleccionada { get; set; }

    [Parameter]
    public EventCallback<DateTime> OnDateSelected { get; set; }

    /*
     * Tomamos la configuración regional del sistema y convertimos los nombres a 2 carácteres
     */
    private List<string> DaysOfWeek => CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames.Select(d => d.Substring(0, 2)).ToList();
    private List<CalendarDay> Days { get; set; } = new List<CalendarDay>();

    protected override void OnParametersSet()
    {
        GenerateCalendar();
    }

    private void GenerateCalendar()
    {
        //Limpiamos los días anteriores por si quedaron algunos
        Days.Clear();
        //Calculamos el 1º dia del mes
        var firstDayOfMonth = new DateTime(CurrentDate.Year, CurrentDate.Month, 1);
        //Calculamos al cantidad de días en el mes
        var daysInMonth = DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month);

        //Según la región obtenemos el 1º dia de la semana
        var firstDayOfWeek = CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
        //Averiguamos en qué día de la semana cae el 1º día del mes
        var startDay = (int)firstDayOfMonth.DayOfWeek - (int)firstDayOfWeek;
        if (startDay < 0) startDay += 7;    //Calculamos espacios vacíos antes del 1º día

        //Agregamos días vacios al principio del 1º día del mes
        //para que el mes quede encuadrado en su lugar
        for (int i = 0; i < startDay; i++)
        {
            Days.Add(new CalendarDay { Date = DateTime.MinValue });
        }

        //Rellenamos con el resto de los días. Se recorre del 1º al último día del mes.
        for (int i = 1; i <= daysInMonth; i++)
        {
            //Generamos un nuevo día
            var date = new DateTime(CurrentDate.Year, CurrentDate.Month, i);
            //Verificamos si está ocupado ese día
            bool isOccupied = OccupiedDates.Contains(date);
            //Bool para saber si está seleccionado
            bool isSelected = false;

            /*Lógica de selección:
             *  Si solo hay fecha de retiro, se marca ese día
             *  Si solo hay fecha de devolución, se marca ese día
             *  Si están las 2 fechas, se evalua si el día se encuentra dentro del rango
             *   y se marca como seleccionado
             */
            if (FechaRetiroSeleccionada.HasValue && FechaDevolucionSeleccionada.HasValue)
            {
                var start = FechaRetiroSeleccionada.Value.Date;
                var end = FechaDevolucionSeleccionada.Value.Date;
                isSelected = date >= start && date <= end;
            }
            else if (FechaRetiroSeleccionada.HasValue)
            {
                isSelected = date == FechaRetiroSeleccionada.Value.Date;
            }
            else if (FechaDevolucionSeleccionada.HasValue)
            {
                isSelected = date == FechaDevolucionSeleccionada.Value.Date;
            }

            Days.Add(new CalendarDay    //Agrega al calendario
                {
                    Date = date,
                    IsOccupied = isOccupied,
                    IsSelected = isSelected
                });
        }

        //Se agregan más días vacios (MinValue) si la última semana
        //no tiene 7 días completos. Mantiene la cuadrícula
        while (Days.Count % 7 != 0)
        {
            Days.Add(new CalendarDay { Date = DateTime.MinValue });
        }
    }

    /* Ejecutado al seleccionar un día en el calendario. Si ese día está
     * vacío (Minvalue) no hace nada.
     * LLama a OnDateSelect notificando al padre que se seleccionó una fecha
     * Esto permite que ReservarLibro maneje la selección de fechas
     */
    private void SelectDate(DateTime date)
    {
        if (date == DateTime.MinValue)
            return;

        OnDateSelected.InvokeAsync(date);
    }

    private async Task PreviousMonth() //Cuando el usuario presiona << para volver atrás un mes
    {
        CurrentDate = CurrentDate.AddMonths(-1);
        await CurrentDateChanged.InvokeAsync(CurrentDate); //Notificación al padre
        GenerateCalendar();
    }

    private async Task NextMonth() //Cuando el usuario presiona >> para adelantar un mes
    {
        CurrentDate = CurrentDate.AddMonths(1);
        await CurrentDateChanged.InvokeAsync(CurrentDate); //Notificación al padre
        GenerateCalendar();
    }

    /* Notificaciones al padre (ReservarLibro): Mantiene la sincronización
     * Cuando Calendar selecciona una fecha, el padre tiene que enterarse:
     *  - actualiza la vista
     *  - mantiene seleccion de fechas
     */




    private class CalendarDay
    {
        public DateTime Date { get; set; }
        public bool IsOccupied { get; set; }
        public bool IsSelected { get; set; }
    }
}