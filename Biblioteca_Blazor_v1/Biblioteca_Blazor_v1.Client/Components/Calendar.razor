@using System.Globalization

<div class="calendar">
    <div class="calendar-header">
        <button @onclick="PreviousMonth">‹</button>
        <span>@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(CurrentDate.Month) @CurrentDate.Year</span>
        <button @onclick="NextMonth">›</button>
    </div>
    <div class="calendar-grid">
        @foreach (var day in DaysOfWeek)
        {
            <div class="calendar-day-header">@day</div>
        }
        @foreach (var day in Days)
        {
            <div class="calendar-day @(day.IsOccupied ? "occupied" : "") @(day.IsSelected ? "selected" : "")" @onclick="() => SelectDate(day.Date)">
                @day.Date.Day
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public DateTime CurrentDate { get; set; } = DateTime.Today;

    [Parameter]
    public List<DateTime> OccupiedDates { get; set; } = new List<DateTime>();

    [Parameter]
    public DateTime? FechaRetiroSeleccionada { get; set; }

    [Parameter]
    public DateTime? FechaDevolucionSeleccionada { get; set; }

    [Parameter]
    public EventCallback<DateTime> OnDateSelected { get; set; }

    private List<string> DaysOfWeek => CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames.Select(d => d.Substring(0, 2)).ToList();
    private List<CalendarDay> Days { get; set; } = new List<CalendarDay>();

    protected override void OnParametersSet()
    {
        GenerateCalendar();
    }

    private void GenerateCalendar()
    {
        Days.Clear();
        var firstDayOfMonth = new DateTime(CurrentDate.Year, CurrentDate.Month, 1);
        var daysInMonth = DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month);
        var startDay = (int)firstDayOfMonth.DayOfWeek;

        for (int i = 0; i < startDay; i++)
        {
            Days.Add(new CalendarDay { Date = DateTime.MinValue });
        }

        for (int i = 1; i <= daysInMonth; i++)
        {
            var date = new DateTime(CurrentDate.Year, CurrentDate.Month, i);
            bool isOccupied = OccupiedDates.Contains(date);
            bool isSelected = false;

            if (FechaRetiroSeleccionada.HasValue && FechaDevolucionSeleccionada.HasValue)
            {
                var start = FechaRetiroSeleccionada.Value.Date;
                var end = FechaDevolucionSeleccionada.Value.Date;
                if (end < start)
                {
                    var temp = start;
                    start = end;
                    end = temp;
                }
                isSelected = date >= start && date <= end;
            }
            else if (FechaRetiroSeleccionada.HasValue && !FechaDevolucionSeleccionada.HasValue)
            {
                isSelected = date == FechaRetiroSeleccionada.Value.Date;
            }

            Days.Add(new CalendarDay
                {
                    Date = date,
                    IsOccupied = isOccupied,
                    IsSelected = isSelected
                });
        }
    }

    private void SelectDate(DateTime date)
    {
        if (date == DateTime.MinValue)
            return;

        OnDateSelected.InvokeAsync(date);
    }

    private void PreviousMonth()
    {
        CurrentDate = CurrentDate.AddMonths(-1);
        GenerateCalendar();
    }

    private void NextMonth()
    {
        CurrentDate = CurrentDate.AddMonths(1);
        GenerateCalendar();
    }

    private class CalendarDay
    {
        public DateTime Date { get; set; }
        public bool IsOccupied { get; set; }
        public bool IsSelected { get; set; }
    }
}